// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/types/v1beta1/wire.proto

package types

import (
	fmt "fmt"
	_ "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// enum PipedValsetOperation
type PipedValsetOperation int32

const (
	PipedValsetOperation_UNSPECIFIED          PipedValsetOperation = 0
	PipedValsetOperation_VALIDATOR_BONDED     PipedValsetOperation = 1
	PipedValsetOperation_VALIDATOR_UNBONDED   PipedValsetOperation = 2
	PipedValsetOperation_VALIDATOR_JAILED     PipedValsetOperation = 3
	PipedValsetOperation_VALIDATOR_TOMBSTONED PipedValsetOperation = 4
	PipedValsetOperation_VALIDATOR_UNJAILED   PipedValsetOperation = 5
	PipedValsetOperation_VALIDATOR_MODIFIED   PipedValsetOperation = 6
	PipedValsetOperation_VALIDATOR_SLASHED    PipedValsetOperation = 7
)

var PipedValsetOperation_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "VALIDATOR_BONDED",
	2: "VALIDATOR_UNBONDED",
	3: "VALIDATOR_JAILED",
	4: "VALIDATOR_TOMBSTONED",
	5: "VALIDATOR_UNJAILED",
	6: "VALIDATOR_MODIFIED",
	7: "VALIDATOR_SLASHED",
}

var PipedValsetOperation_value = map[string]int32{
	"UNSPECIFIED":          0,
	"VALIDATOR_BONDED":     1,
	"VALIDATOR_UNBONDED":   2,
	"VALIDATOR_JAILED":     3,
	"VALIDATOR_TOMBSTONED": 4,
	"VALIDATOR_UNJAILED":   5,
	"VALIDATOR_MODIFIED":   6,
	"VALIDATOR_SLASHED":    7,
}

func (x PipedValsetOperation) String() string {
	return proto.EnumName(PipedValsetOperation_name, int32(x))
}

func (PipedValsetOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c573c9158aa3b788, []int{0}
}

// InfractionType indicates the infraction type a validator committed.
// Note ccv.InfractionType to maintain compatibility between ICS versions
// using different versions of the cosmos-sdk and ibc-go modules.
type InfractionType int32

const (
	// UNSPECIFIED defines an empty infraction type.
	InfractionEmpty InfractionType = 0
	// DOUBLE_SIGN defines a validator that double-signs a block.
	DoubleSign InfractionType = 1
	// DOWNTIME defines a validator that missed signing too many blocks.
	Downtime InfractionType = 2
)

var InfractionType_name = map[int32]string{
	0: "INFRACTION_TYPE_UNSPECIFIED",
	1: "INFRACTION_TYPE_DOUBLE_SIGN",
	2: "INFRACTION_TYPE_DOWNTIME",
}

var InfractionType_value = map[string]int32{
	"INFRACTION_TYPE_UNSPECIFIED": 0,
	"INFRACTION_TYPE_DOUBLE_SIGN": 1,
	"INFRACTION_TYPE_DOWNTIME":    2,
}

func (x InfractionType) String() string {
	return proto.EnumName(InfractionType_name, int32(x))
}

func (InfractionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c573c9158aa3b788, []int{1}
}

// SlashInfo defines info event from slashing
type SlashInfo struct {
	InfractionHeight int64  `protobuf:"varint,2,opt,name=infraction_height,json=infractionHeight,proto3" json:"infraction_height,omitempty"`
	Power            int64  `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	TotalSlashAmount string `protobuf:"bytes,4,opt,name=total_slash_amount,json=totalSlashAmount,proto3" json:"total_slash_amount,omitempty"`
	SlashFraction    string `protobuf:"bytes,5,opt,name=slash_fraction,json=slashFraction,proto3" json:"slash_fraction,omitempty"`
	TimeInfraction   int64  `protobuf:"varint,6,opt,name=time_infraction,json=timeInfraction,proto3" json:"time_infraction,omitempty"`
}

func (m *SlashInfo) Reset()         { *m = SlashInfo{} }
func (m *SlashInfo) String() string { return proto.CompactTextString(m) }
func (*SlashInfo) ProtoMessage()    {}
func (*SlashInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c573c9158aa3b788, []int{0}
}
func (m *SlashInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashInfo.Merge(m, src)
}
func (m *SlashInfo) XXX_Size() int {
	return m.Size()
}
func (m *SlashInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlashInfo proto.InternalMessageInfo

// ConsumerPacketData contains a consumer packet data and a type tag
type ConsumerPacketData struct {
	Type PipedValsetOperation `protobuf:"varint,1,opt,name=type,proto3,enum=osmosis.types.v1beta1.PipedValsetOperation" json:"type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*ConsumerPacketData_SlashPacketData
	Data isConsumerPacketData_Data `protobuf_oneof:"data"`
}

func (m *ConsumerPacketData) Reset()         { *m = ConsumerPacketData{} }
func (m *ConsumerPacketData) String() string { return proto.CompactTextString(m) }
func (*ConsumerPacketData) ProtoMessage()    {}
func (*ConsumerPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c573c9158aa3b788, []int{1}
}
func (m *ConsumerPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerPacketData.Merge(m, src)
}
func (m *ConsumerPacketData) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerPacketData proto.InternalMessageInfo

type isConsumerPacketData_Data interface {
	isConsumerPacketData_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConsumerPacketData_SlashPacketData struct {
	SlashPacketData *SlashInfo `protobuf:"bytes,2,opt,name=slashPacketData,proto3,oneof" json:"slashPacketData,omitempty"`
}

func (*ConsumerPacketData_SlashPacketData) isConsumerPacketData_Data() {}

func (m *ConsumerPacketData) GetData() isConsumerPacketData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ConsumerPacketData) GetSlashPacketData() *SlashInfo {
	if x, ok := m.GetData().(*ConsumerPacketData_SlashPacketData); ok {
		return x.SlashPacketData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConsumerPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConsumerPacketData_SlashPacketData)(nil),
	}
}

func init() {
	proto.RegisterEnum("osmosis.types.v1beta1.PipedValsetOperation", PipedValsetOperation_name, PipedValsetOperation_value)
	proto.RegisterEnum("osmosis.types.v1beta1.InfractionType", InfractionType_name, InfractionType_value)
	proto.RegisterType((*SlashInfo)(nil), "osmosis.types.v1beta1.SlashInfo")
	proto.RegisterType((*ConsumerPacketData)(nil), "osmosis.types.v1beta1.ConsumerPacketData")
}

func init() { proto.RegisterFile("osmosis/types/v1beta1/wire.proto", fileDescriptor_c573c9158aa3b788) }

var fileDescriptor_c573c9158aa3b788 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x4f, 0xdb, 0x3c,
	0x1c, 0xc7, 0x13, 0x28, 0x7d, 0x1e, 0xcc, 0xf3, 0xb4, 0xc1, 0x2b, 0x53, 0x54, 0xa4, 0x28, 0x42,
	0x9b, 0x86, 0x60, 0x34, 0x82, 0xed, 0x3e, 0xb5, 0x24, 0x8c, 0x4c, 0x25, 0xa9, 0x9a, 0xc2, 0xb4,
	0x5d, 0x22, 0x27, 0x35, 0xad, 0x45, 0x13, 0x57, 0xb1, 0x3b, 0xc6, 0x3b, 0x98, 0x38, 0xed, 0x0d,
	0x70, 0xda, 0x65, 0xd3, 0xde, 0x08, 0x07, 0x0e, 0x1c, 0x77, 0xdc, 0xca, 0x1b, 0x99, 0xe2, 0x64,
	0x8d, 0xf8, 0xb3, 0x4b, 0x64, 0x7f, 0xfc, 0xfd, 0x7e, 0xfd, 0xb3, 0x7f, 0x31, 0xd0, 0x29, 0x8b,
	0x28, 0x23, 0xcc, 0xe0, 0x67, 0x63, 0xcc, 0x8c, 0x0f, 0xdb, 0x01, 0xe6, 0x68, 0xdb, 0x38, 0x25,
	0x09, 0x6e, 0x8c, 0x13, 0xca, 0x29, 0x5c, 0xc9, 0x15, 0x0d, 0xa1, 0x68, 0xe4, 0x8a, 0xba, 0x16,
	0x0a, 0x6e, 0x04, 0x88, 0xe1, 0x99, 0x2d, 0xa4, 0x24, 0xce, 0x6c, 0xf5, 0xda, 0x80, 0x0e, 0xa8,
	0x18, 0x1a, 0xe9, 0x28, 0xa7, 0xcb, 0x28, 0x22, 0x31, 0x35, 0xc4, 0x37, 0x47, 0x4f, 0xf2, 0x20,
	0xc6, 0xd1, 0x09, 0x89, 0x07, 0xb3, 0xac, 0x7c, 0x9e, 0xab, 0x56, 0x39, 0x8e, 0xfb, 0x38, 0x89,
	0x48, 0xcc, 0x0d, 0x14, 0x84, 0x24, 0xab, 0x37, 0x5b, 0x5c, 0xbb, 0x92, 0xc1, 0xa2, 0x37, 0x42,
	0x6c, 0x68, 0xc7, 0xc7, 0x14, 0x6e, 0x82, 0x65, 0x12, 0x1f, 0x27, 0x28, 0xe4, 0x84, 0xc6, 0xfe,
	0x10, 0x93, 0xc1, 0x90, 0xab, 0x73, 0xba, 0xbc, 0x3e, 0xdf, 0x55, 0x8a, 0x85, 0x7d, 0xc1, 0x61,
	0x0d, 0x2c, 0x8c, 0xe9, 0x29, 0x4e, 0xd4, 0x79, 0x21, 0xc8, 0x26, 0xf0, 0x39, 0x80, 0x9c, 0x72,
	0x34, 0xf2, 0x59, 0x9a, 0xea, 0xa3, 0x88, 0x4e, 0x62, 0xae, 0x96, 0x74, 0x79, 0x7d, 0xb1, 0xab,
	0x88, 0x15, 0xb1, 0x5d, 0x53, 0x70, 0xf8, 0x14, 0x54, 0x32, 0xdd, 0x9f, 0x6c, 0x75, 0x41, 0x28,
	0xff, 0x17, 0x74, 0x2f, 0x87, 0xf0, 0x19, 0xa8, 0x72, 0x12, 0x61, 0xbf, 0xa8, 0x41, 0x2d, 0x8b,
	0x4d, 0x2b, 0x29, 0xb6, 0x67, 0x74, 0xed, 0xbb, 0x0c, 0xe0, 0x2e, 0x8d, 0xd9, 0x24, 0xc2, 0x49,
	0x07, 0x85, 0x27, 0x98, 0x9b, 0x88, 0x23, 0xf8, 0x0a, 0x94, 0xd2, 0x43, 0xab, 0xb2, 0x2e, 0xaf,
	0x57, 0x76, 0x36, 0x1b, 0x0f, 0xf6, 0xa5, 0xd1, 0x21, 0x63, 0xdc, 0x3f, 0x42, 0x23, 0x86, 0xb9,
	0x3b, 0xc6, 0x09, 0x4a, 0x13, 0xbb, 0xc2, 0x08, 0xdb, 0xa0, 0x2a, 0x2a, 0x2a, 0x32, 0xc5, 0xb5,
	0x2c, 0xed, 0xe8, 0x7f, 0xc9, 0x9a, 0xdd, 0xe9, 0xbe, 0xd4, 0xbd, 0x6b, 0x6d, 0x95, 0x41, 0xa9,
	0x8f, 0x38, 0xda, 0xb8, 0x92, 0x41, 0xed, 0xa1, 0x4d, 0x61, 0x15, 0x2c, 0x1d, 0x3a, 0x5e, 0xc7,
	0xda, 0xb5, 0xf7, 0x6c, 0xcb, 0x54, 0x24, 0x58, 0x03, 0xca, 0x51, 0xb3, 0x6d, 0x9b, 0xcd, 0x9e,
	0xdb, 0xf5, 0x5b, 0xae, 0x63, 0x5a, 0xa6, 0x22, 0xc3, 0xc7, 0x00, 0x16, 0xf4, 0xd0, 0xc9, 0xf9,
	0xdc, 0x6d, 0xf5, 0x9b, 0xa6, 0xdd, 0xb6, 0x4c, 0x65, 0x1e, 0xaa, 0xa0, 0x56, 0xd0, 0x9e, 0x7b,
	0xd0, 0xf2, 0x7a, 0xae, 0x63, 0x99, 0x4a, 0xe9, 0x6e, 0x4e, 0xee, 0x58, 0xb8, 0xcd, 0x0f, 0x5c,
	0x33, 0xab, 0xa6, 0x0c, 0x57, 0xc0, 0x72, 0xc1, 0xbd, 0x76, 0xd3, 0xdb, 0xb7, 0x4c, 0xe5, 0x9f,
	0x8d, 0x6f, 0x32, 0xa8, 0x14, 0xbd, 0xe8, 0xa5, 0xf7, 0xf6, 0x12, 0xac, 0xda, 0xce, 0x5e, 0xb7,
	0xb9, 0xdb, 0xb3, 0x5d, 0xc7, 0xef, 0xbd, 0xeb, 0x58, 0xfe, 0xad, 0x83, 0xd5, 0x1f, 0x9d, 0x5f,
	0xe8, 0xd5, 0xc2, 0x64, 0x45, 0x63, 0x7e, 0x06, 0x8d, 0xfb, 0x2e, 0xd3, 0x3d, 0x6c, 0xb5, 0x2d,
	0xdf, 0xb3, 0x5f, 0x3b, 0x8a, 0x5c, 0xaf, 0x9c, 0x5f, 0xe8, 0xc0, 0xa4, 0x93, 0x60, 0x84, 0x3d,
	0x32, 0x88, 0xe1, 0x06, 0x50, 0xef, 0x1b, 0xde, 0x3a, 0x3d, 0xfb, 0xc0, 0x52, 0xe6, 0xea, 0xff,
	0x9d, 0x5f, 0xe8, 0xff, 0x9a, 0xf4, 0x34, 0x4e, 0x7f, 0x96, 0x7a, 0xe9, 0xd3, 0x17, 0x4d, 0x6a,
	0x79, 0x97, 0xbf, 0x34, 0xe9, 0xeb, 0x54, 0x93, 0x2e, 0xa7, 0x9a, 0x7c, 0x3d, 0xd5, 0xe4, 0x9f,
	0x53, 0x4d, 0xfe, 0x7c, 0xa3, 0x49, 0xd7, 0x37, 0x9a, 0xf4, 0xe3, 0x46, 0x93, 0xde, 0x6f, 0x0f,
	0x08, 0x1f, 0x4e, 0x82, 0x46, 0x48, 0x23, 0x23, 0xef, 0xf1, 0xd6, 0x08, 0x05, 0xcc, 0x88, 0x30,
	0x1b, 0x6e, 0x31, 0x1c, 0x4e, 0x12, 0xc2, 0xcf, 0xb6, 0x58, 0xff, 0xc4, 0xf8, 0x98, 0x3d, 0xa9,
	0xa0, 0x2c, 0xde, 0xd4, 0x8b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x61, 0x91, 0x2d, 0x1a,
	0x04, 0x00, 0x00,
}

func (m *SlashInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeInfraction != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.TimeInfraction))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SlashFraction) > 0 {
		i -= len(m.SlashFraction)
		copy(dAtA[i:], m.SlashFraction)
		i = encodeVarintWire(dAtA, i, uint64(len(m.SlashFraction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalSlashAmount) > 0 {
		i -= len(m.TotalSlashAmount)
		copy(dAtA[i:], m.TotalSlashAmount)
		i = encodeVarintWire(dAtA, i, uint64(len(m.TotalSlashAmount)))
		i--
		dAtA[i] = 0x22
	}
	if m.Power != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if m.InfractionHeight != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.InfractionHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerPacketData_SlashPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerPacketData_SlashPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlashPacketData != nil {
		{
			size, err := m.SlashPacketData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWire(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintWire(dAtA []byte, offset int, v uint64) int {
	offset -= sovWire(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SlashInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfractionHeight != 0 {
		n += 1 + sovWire(uint64(m.InfractionHeight))
	}
	if m.Power != 0 {
		n += 1 + sovWire(uint64(m.Power))
	}
	l = len(m.TotalSlashAmount)
	if l > 0 {
		n += 1 + l + sovWire(uint64(l))
	}
	l = len(m.SlashFraction)
	if l > 0 {
		n += 1 + l + sovWire(uint64(l))
	}
	if m.TimeInfraction != 0 {
		n += 1 + sovWire(uint64(m.TimeInfraction))
	}
	return n
}

func (m *ConsumerPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovWire(uint64(m.Type))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *ConsumerPacketData_SlashPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlashPacketData != nil {
		l = m.SlashPacketData.Size()
		n += 1 + l + sovWire(uint64(l))
	}
	return n
}

func sovWire(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWire(x uint64) (n int) {
	return sovWire(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SlashInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfractionHeight", wireType)
			}
			m.InfractionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfractionHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSlashAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWire
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSlashAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWire
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInfraction", wireType)
			}
			m.TimeInfraction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInfraction |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PipedValsetOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashPacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWire
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlashInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &ConsumerPacketData_SlashPacketData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWire(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWire
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWire
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWire
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWire
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWire        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWire          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWire = fmt.Errorf("proto: unexpected end of group")
)
